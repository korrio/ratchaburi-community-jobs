const db = require('../models/database');

// Enhanced sample data with updated schema fields
const enhancedSampleData = {
  serviceCategories: [
    { name: '‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ', description: '‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ö‡πâ‡∏≤‡∏ô ‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô', icon: 'üßπ' },
    { name: '‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏î‡∏´‡∏ç‡πâ‡∏≤', description: '‡∏ï‡∏±‡∏î‡∏´‡∏ç‡πâ‡∏≤ ‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏ß‡∏ô', icon: 'üå±' },
    { name: '‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡πÑ‡∏°‡πâ', description: '‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡πÑ‡∏°‡πâ ‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£', icon: 'üçé' },
    { name: '‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢', description: '‡∏ä‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏Ç‡∏≤‡∏¢ ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ç‡∏≤‡∏¢', icon: 'üõí' },
    { name: '‡∏ä‡πà‡∏≤‡∏á‡πÑ‡∏ü‡∏ü‡πâ‡∏≤', description: '‡∏ã‡πà‡∏≠‡∏°‡πÑ‡∏ü‡∏ü‡πâ‡∏≤ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÑ‡∏ü‡∏ü‡πâ‡∏≤', icon: '‚ö°' },
    { name: '‡∏ä‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏õ‡∏≤', description: '‡∏ã‡πà‡∏≠‡∏°‡∏ó‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏õ‡∏≤ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏õ‡∏£‡∏∞‡∏õ‡∏≤', icon: 'üöø' },
    { name: '‡∏ä‡πà‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á', description: '‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ö‡πâ‡∏≤‡∏ô', icon: 'üèóÔ∏è' },
    { name: '‡∏ä‡πà‡∏≤‡∏á‡πÅ‡∏≠‡∏£‡πå', description: '‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏≠‡∏£‡πå ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏≠‡∏£‡πå', icon: '‚ùÑÔ∏è' },
    { name: '‡∏ä‡πà‡∏≤‡∏á‡∏ï‡∏±‡∏î‡∏ú‡∏°', description: '‡∏ï‡∏±‡∏î‡∏ú‡∏° ‡∏™‡∏£‡∏∞‡∏ú‡∏°', icon: '‚úÇÔ∏è' },
    { name: '‡∏á‡∏≤‡∏ô‡∏Ç‡∏ô‡∏™‡πà‡∏á', description: '‡∏Ç‡∏ô‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á‡∏Ç‡∏ô‡∏Ç‡∏≠‡∏á', icon: 'üöõ' }
  ],
  
  serviceProviders: [
    // ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏™‡∏∞‡∏î‡∏ß‡∏Å - ‡πÅ‡∏û‡∏á‡∏û‡∏ß‡∏¢
    {
      name: '‡πÄ‡∏î‡πá‡∏Å‡∏ä‡∏≤‡∏¢‡∏ò‡∏ô‡∏ß‡∏±‡∏í‡∏ô‡πå ‡∏™‡∏≠‡∏™‡∏∞‡∏≠‡∏≤‡∏î',
      phone: '082-507-6933',
      line_id: 'thanawat_clean',
      service_category_id: 1, // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
      location: '138 ‡∏´‡∏°‡∏π‡πà 1 ‡∏ï‡∏≥‡∏ö‡∏•‡πÅ‡∏û‡∏á‡∏û‡∏ß‡∏¢ ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏™‡∏∞‡∏î‡∏ß‡∏Å ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ 70130',
      district: '‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏™‡∏∞‡∏î‡∏ß‡∏Å',
      subdistrict: '‡πÅ‡∏û‡∏á‡∏û‡∏ß‡∏¢',
      description: '‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ö‡πâ‡∏≤‡∏ô ‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå 3 ‡∏õ‡∏µ',
      price_range: '80-120 ‡∏ö‡∏≤‡∏ó‡∏ï‡πà‡∏≠‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á',
      available_days: '‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå,‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£,‡∏û‡∏∏‡∏ò,‡∏®‡∏∏‡∏Å‡∏£‡πå,‡πÄ‡∏™‡∏≤‡∏£‡πå',
      available_hours: '08:00-16:00',
      rating: 4.5,
      total_jobs: 25
    },
    
    // ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏™‡∏∞‡∏î‡∏ß‡∏Å - ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏™‡∏∞‡∏î‡∏ß‡∏Å
    {
      name: '‡∏ô‡∏≤‡∏¢‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ',
      phone: '081-234-5678',
      line_id: 'somchai_electric',
      service_category_id: 5, // ‡∏ä‡πà‡∏≤‡∏á‡πÑ‡∏ü‡∏ü‡πâ‡∏≤
      location: '456 ‡∏´‡∏°‡∏π‡πà 2 ‡∏ï‡∏≥‡∏ö‡∏•‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏™‡∏∞‡∏î‡∏ß‡∏Å ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏™‡∏∞‡∏î‡∏ß‡∏Å ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ',
      district: '‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏™‡∏∞‡∏î‡∏ß‡∏Å',
      subdistrict: '‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏™‡∏∞‡∏î‡∏ß‡∏Å',
      description: '‡∏ä‡πà‡∏≤‡∏á‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û ‡∏ã‡πà‡∏≠‡∏°‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÑ‡∏ü‡∏ü‡πâ‡∏≤',
      price_range: '300-1500 ‡∏ö‡∏≤‡∏ó',
      available_days: '‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå,‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£,‡∏û‡∏∏‡∏ò,‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ,‡∏®‡∏∏‡∏Å‡∏£‡πå,‡πÄ‡∏™‡∏≤‡∏£‡πå',
      available_hours: '08:00-18:00',
      rating: 4.8,
      total_jobs: 125
    },

    // ‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ - ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏°‡∏∑‡∏≠‡∏á
    {
      name: '‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡πÅ‡∏û‡∏£‡∏ß‡∏≤ ‡∏´‡∏•‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡πÄ‡∏™‡∏£‡∏¥‡∏ê‡∏û‡∏£',
      phone: '082-372-8729',
      line_id: 'praewa_clean',
      service_category_id: 1, // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
      location: '22/2 ‡∏´‡∏°‡∏π‡πà 11 ‡∏ï‡∏≥‡∏ö‡∏•‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏°‡∏∑‡∏≠‡∏á ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ',
      district: '‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ',
      subdistrict: '‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏°‡∏∑‡∏≠‡∏á',
      description: '‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ö‡πâ‡∏≤‡∏ô ‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏î‡∏µ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏¢‡πà‡∏≠‡∏°‡πÄ‡∏¢‡∏≤',
      price_range: '90-130 ‡∏ö‡∏≤‡∏ó‡∏ï‡πà‡∏≠‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á',
      available_days: '‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå,‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£,‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ,‡∏®‡∏∏‡∏Å‡∏£‡πå,‡πÄ‡∏™‡∏≤‡∏£‡πå,‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå',
      available_hours: '07:00-15:00',
      rating: 4.4,
      total_jobs: 31
    },

    // ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏™‡∏∞‡∏î‡∏ß‡∏Å - ‡∏î‡∏≠‡∏ô‡∏ï‡∏≤‡πÄ‡∏û‡∏ä‡∏£
    {
      name: '‡∏ô‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏±‡∏¢ ‡∏ô‡∏≥‡∏ä‡∏±‡∏¢',
      phone: '082-345-6789',
      line_id: 'wichai_plumber',
      service_category_id: 6, // ‡∏ä‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏õ‡∏≤
      location: '789 ‡∏´‡∏°‡∏π‡πà 3 ‡∏ï‡∏≥‡∏ö‡∏•‡∏î‡∏≠‡∏ô‡∏ï‡∏≤‡πÄ‡∏û‡∏ä‡∏£ ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏™‡∏∞‡∏î‡∏ß‡∏Å ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ',
      district: '‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏™‡∏∞‡∏î‡∏ß‡∏Å',
      subdistrict: '‡∏î‡∏≠‡∏ô‡∏ï‡∏≤‡πÄ‡∏û‡∏ä‡∏£',
      description: '‡∏ä‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏õ‡∏≤‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û ‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ç‡∏ô‡∏≤‡∏î ‡∏ã‡πà‡∏≠‡∏°‡∏ó‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏õ‡∏≤ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏õ‡∏±‡πä‡∏°‡∏ô‡πâ‡∏≥',
      price_range: '200-2000 ‡∏ö‡∏≤‡∏ó',
      available_days: '‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô',
      available_hours: '07:00-19:00',
      rating: 4.6,
      total_jobs: 89
    },

    // ‡∏ö‡∏≤‡∏á‡πÅ‡∏û - ‡∏´‡∏±‡∏ß‡πÇ‡∏û
    {
      name: '‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏®‡∏®‡∏¥‡∏ß‡∏¥‡∏°‡∏• ‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏®‡∏¥‡∏£‡∏¥',
      phone: '095-015-9258',
      line_id: 'sasiwimol_grass',
      service_category_id: 2, // ‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏î‡∏´‡∏ç‡πâ‡∏≤
      location: '25 ‡∏´‡∏°‡∏π‡πà 8 ‡∏ï‡∏≥‡∏ö‡∏•‡∏´‡∏±‡∏ß‡πÇ‡∏û ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏ö‡∏≤‡∏á‡πÅ‡∏û ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ',
      district: '‡∏ö‡∏≤‡∏á‡πÅ‡∏û',
      subdistrict: '‡∏´‡∏±‡∏ß‡πÇ‡∏û',
      description: '‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏î‡∏´‡∏ç‡πâ‡∏≤ ‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏ß‡∏ô ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 5 ‡∏õ‡∏µ',
      price_range: '50-100 ‡∏ö‡∏≤‡∏ó‡∏ï‡πà‡∏≠‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á',
      available_days: '‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå,‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£,‡∏û‡∏∏‡∏ò,‡∏®‡∏∏‡∏Å‡∏£‡πå,‡πÄ‡∏™‡∏≤‡∏£‡πå,‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå',
      available_hours: '06:00-16:00',
      rating: 4.6,
      total_jobs: 52
    },

    // ‡πÇ‡∏û‡∏ò‡∏≤‡∏£‡∏≤‡∏° - ‡∏Ñ‡∏•‡∏≠‡∏á‡∏Ç‡πà‡∏≠‡∏¢
    {
      name: '‡∏ô‡∏≤‡∏¢‡∏†‡∏π‡∏£‡∏¥ ‡∏Ç‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£',
      phone: '083-456-7890',
      line_id: 'phuris_fruits',
      service_category_id: 3, // ‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡πÑ‡∏°‡πâ
      location: '111 ‡∏´‡∏°‡∏π‡πà 5 ‡∏ï‡∏≥‡∏ö‡∏•‡∏Ñ‡∏•‡∏≠‡∏á‡∏Ç‡πà‡∏≠‡∏¢ ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡πÇ‡∏û‡∏ò‡∏≤‡∏£‡∏≤‡∏° ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ',
      district: '‡πÇ‡∏û‡∏ò‡∏≤‡∏£‡∏≤‡∏°',
      subdistrict: '‡∏Ñ‡∏•‡∏≠‡∏á‡∏Ç‡πà‡∏≠‡∏¢',
      description: '‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏ó‡∏∏‡∏Å‡∏ä‡∏ô‡∏¥‡∏î ‡∏°‡∏∞‡∏°‡πà‡∏ß‡∏á ‡∏°‡∏∞‡∏û‡∏£‡πâ‡∏≤‡∏ß ‡∏ó‡∏∏‡πÄ‡∏£‡∏µ‡∏¢‡∏ô',
      price_range: '70-150 ‡∏ö‡∏≤‡∏ó‡∏ï‡πà‡∏≠‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á',
      available_days: '‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå,‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£,‡∏û‡∏∏‡∏ò,‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ,‡∏®‡∏∏‡∏Å‡∏£‡πå',
      available_hours: '05:00-14:00',
      rating: 4.3,
      total_jobs: 67
    }
  ],

  customers: [
    // ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏™‡∏∞‡∏î‡∏ß‡∏Å - ‡∏î‡∏≠‡∏ô‡∏Ñ‡∏•‡∏±‡∏á (same district as some providers)
    {
      name: '‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏ï‡∏£‡∏µ‡∏ä‡∏é‡∏≤ ‡∏à‡∏µ‡∏ö‡∏ü‡∏±‡∏Å',
      phone: '084-884-3915',
      line_id: 'treechada_home',
      location: '289 ‡∏´‡∏°‡∏π‡πà 1 ‡∏ï‡∏≥‡∏ö‡∏•‡∏î‡∏≠‡∏ô‡∏Ñ‡∏•‡∏±‡∏á ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏™‡∏∞‡∏î‡∏ß‡∏Å ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ 70130',
      district: '‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏™‡∏∞‡∏î‡∏ß‡∏Å',
      subdistrict: '‡∏î‡∏≠‡∏ô‡∏Ñ‡∏•‡∏±‡∏á',
      service_category_id: 1, // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
      job_description: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ô‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ö‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏´‡∏ç‡πà 2 ‡∏ä‡∏±‡πâ‡∏ô',
      budget_range: '80-120 ‡∏ö‡∏≤‡∏ó‡∏ï‡πà‡∏≠‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á',
      preferred_date: '2024-12-15', // ‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå
      preferred_time: '09:00-15:00',
      urgency_level: 'medium',
      preferred_contact: 'phone'
    },

    // ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏™‡∏∞‡∏î‡∏ß‡∏Å - ‡πÅ‡∏û‡∏á‡∏û‡∏ß‡∏¢ (same subdistrict as provider)
    {
      name: '‡∏ô‡∏≤‡∏¢‡∏™‡∏∏‡∏£‡∏û‡∏• ‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏™‡∏∏‡∏Ç',
      phone: '081-567-8901',
      line_id: 'surapol_electric',
      location: '456 ‡∏´‡∏°‡∏π‡πà 2 ‡∏ï‡∏≥‡∏ö‡∏•‡πÅ‡∏û‡∏á‡∏û‡∏ß‡∏¢ ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏™‡∏∞‡∏î‡∏ß‡∏Å ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ',
      district: '‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏™‡∏∞‡∏î‡∏ß‡∏Å',
      subdistrict: '‡πÅ‡∏û‡∏á‡∏û‡∏ß‡∏¢',
      service_category_id: 5, // ‡∏ä‡πà‡∏≤‡∏á‡πÑ‡∏ü‡∏ü‡πâ‡∏≤
      job_description: '‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏î‡∏±‡∏ö‡∏ö‡πà‡∏≠‡∏¢ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ä‡πà‡∏≤‡∏á‡∏°‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö',
      budget_range: '300-1500 ‡∏ö‡∏≤‡∏ó',
      preferred_date: '2024-12-16', // ‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå
      preferred_time: '10:00-16:00',
      urgency_level: 'high',
      preferred_contact: 'line'
    },

    // ‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ - ‡∏Ñ‡∏∏‡πâ‡∏á‡∏ô‡πâ‡∏≥‡∏ß‡∏ô (different district)
    {
      name: '‡∏ô‡∏≤‡∏¢‡∏†‡∏≤‡∏ì‡∏∏‡∏ß‡∏±‡∏ä‡∏£ ‡πÄ‡∏•‡πá‡∏ö‡∏Ñ‡∏£‡∏∏‡∏ë',
      phone: '083-038-7220',
      line_id: 'panuwat_garden',
      location: '46 ‡∏´‡∏°‡∏π‡πà 2 ‡∏ï‡∏≥‡∏ö‡∏•‡∏Ñ‡∏∏‡πâ‡∏á‡∏ô‡πâ‡∏≥‡∏ß‡∏ô ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ 70000',
      district: '‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ',
      subdistrict: '‡∏Ñ‡∏∏‡πâ‡∏á‡∏ô‡πâ‡∏≥‡∏ß‡∏ô',
      service_category_id: 2, // ‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏î‡∏´‡∏ç‡πâ‡∏≤
      job_description: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏´‡∏ç‡πâ‡∏≤‡πÉ‡∏ô‡∏™‡∏ß‡∏ô‡∏ö‡πâ‡∏≤‡∏ô ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 500 ‡∏ï‡∏£‡∏°.',
      budget_range: '50-100 ‡∏ö‡∏≤‡∏ó‡∏ï‡πà‡∏≠‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á',
      preferred_date: '2024-12-17', // ‡∏ß‡∏±‡∏ô‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£
      preferred_time: '08:00-12:00',
      urgency_level: 'low',
      preferred_contact: 'phone'
    },

    // ‡∏ö‡∏≤‡∏á‡πÅ‡∏û - ‡∏´‡∏±‡∏ß‡πÇ‡∏û (same as grass cutting provider)
    {
      name: '‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏ò‡∏±‡∏ç‡∏ç‡πÄ‡∏£‡∏® ‡πÄ‡∏Å‡∏©‡∏°‡∏®‡∏£‡∏µ',
      phone: '098-398-9919',
      line_id: 'thanyares_grass',
      location: '87/1 ‡∏´‡∏°‡∏π‡πà 6 ‡∏ï‡∏≥‡∏ö‡∏•‡∏´‡∏±‡∏ß‡πÇ‡∏û ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏ö‡∏≤‡∏á‡πÅ‡∏û ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ 70160',
      district: '‡∏ö‡∏≤‡∏á‡πÅ‡∏û',
      subdistrict: '‡∏´‡∏±‡∏ß‡πÇ‡∏û',
      service_category_id: 2, // ‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏î‡∏´‡∏ç‡πâ‡∏≤
      job_description: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏´‡∏ç‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏ö‡πâ‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞‡∏î‡∏π‡πÅ‡∏•‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ',
      budget_range: '60-120 ‡∏ö‡∏≤‡∏ó‡∏ï‡πà‡∏≠‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á',
      preferred_date: '2024-12-18', // ‡∏ß‡∏±‡∏ô‡∏û‡∏∏‡∏ò
      preferred_time: '07:00-11:00',
      urgency_level: 'medium',
      preferred_contact: 'both'
    },

    // ‡πÇ‡∏û‡∏ò‡∏≤‡∏£‡∏≤‡∏° - ‡∏Ñ‡∏•‡∏≠‡∏á‡∏Ç‡πà‡∏≠‡∏¢ (different district)
    {
      name: '‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏ß‡∏ô‡∏¥‡∏î‡∏≤ ‡πÄ‡∏™‡∏∑‡∏≠‡∏Å‡∏•‡∏±‡πà‡∏ô',
      phone: '083-493-9172',
      line_id: 'vanida_fruits',
      location: '56/1 ‡∏´‡∏°‡∏π‡πà 2 ‡∏ï‡∏≥‡∏ö‡∏•‡∏Ñ‡∏•‡∏≠‡∏á‡∏Ç‡πà‡∏≠‡∏¢ ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡πÇ‡∏û‡∏ò‡∏≤‡∏£‡∏≤‡∏° ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ 70120',
      district: '‡πÇ‡∏û‡∏ò‡∏≤‡∏£‡∏≤‡∏°',
      subdistrict: '‡∏Ñ‡∏•‡∏≠‡∏á‡∏Ç‡πà‡∏≠‡∏¢',
      service_category_id: 3, // ‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡πÑ‡∏°‡πâ
      job_description: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ô‡πÄ‡∏Å‡πá‡∏ö‡∏°‡∏∞‡∏°‡πà‡∏ß‡∏á‡πÅ‡∏•‡∏∞‡∏ó‡∏∏‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡πÉ‡∏ô‡∏™‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ö‡πâ‡∏≤‡∏ô',
      budget_range: '80-150 ‡∏ö‡∏≤‡∏ó‡∏ï‡πà‡∏≠‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á',
      preferred_date: '2024-12-19', // ‡∏ß‡∏±‡∏ô‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ
      preferred_time: '06:00-12:00',
      urgency_level: 'high',
      preferred_contact: 'phone'
    },

    // ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏™‡∏∞‡∏î‡∏ß‡∏Å - ‡∏î‡∏≠‡∏ô‡∏ï‡∏≤‡πÄ‡∏û‡∏ä‡∏£ (same subdistrict as plumber)
    {
      name: '‡∏ô‡∏≤‡∏¢‡∏≠‡∏ô‡∏∏‡∏û‡∏á‡∏©‡πå ‡∏ô‡πâ‡∏≥‡πÉ‡∏™',
      phone: '082-678-9012',
      line_id: 'anupong_water',
      location: '321 ‡∏´‡∏°‡∏π‡πà 4 ‡∏ï‡∏≥‡∏ö‡∏•‡∏î‡∏≠‡∏ô‡∏ï‡∏≤‡πÄ‡∏û‡∏ä‡∏£ ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏™‡∏∞‡∏î‡∏ß‡∏Å ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ',
      district: '‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏™‡∏∞‡∏î‡∏ß‡∏Å',
      subdistrict: '‡∏î‡∏≠‡∏ô‡∏ï‡∏≤‡πÄ‡∏û‡∏ä‡∏£',
      service_category_id: 6, // ‡∏ä‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏õ‡∏≤
      job_description: '‡∏ó‡πà‡∏≠‡∏ô‡πâ‡∏≥‡πÅ‡∏ï‡∏Å ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ä‡πà‡∏≤‡∏á‡∏°‡∏≤‡∏ã‡πà‡∏≠‡∏°‡∏î‡πà‡∏ß‡∏ô',
      budget_range: '200-2000 ‡∏ö‡∏≤‡∏ó',
      preferred_date: '2024-12-20', // ‡∏ß‡∏±‡∏ô‡∏®‡∏∏‡∏Å‡∏£‡πå
      preferred_time: '08:00-18:00',
      urgency_level: 'high',
      preferred_contact: 'phone'
    }
  ]
};

async function seedEnhancedDatabase() {
  try {
    console.log('üå± Starting enhanced database seeding...');

    // Temporarily disable foreign key constraints for cleanup
    console.log('üßπ Clearing existing data...');
    await db.run('PRAGMA foreign_keys = OFF');
    
    // Clear existing data first (in proper order due to foreign keys)
    await db.run('DELETE FROM job_matches');
    await db.run('DELETE FROM customers'); 
    await db.run('DELETE FROM service_providers');
    await db.run('DELETE FROM service_categories');
    
    // Reset auto-increment counters
    await db.run('DELETE FROM sqlite_sequence WHERE name IN ("service_categories", "service_providers", "customers", "job_matches")');
    
    // Re-enable foreign key constraints
    await db.run('PRAGMA foreign_keys = ON');
    
    // Insert service categories first (required for foreign keys)
    console.log('üìù Inserting service categories...');
    for (const category of enhancedSampleData.serviceCategories) {
      await db.run(
        'INSERT INTO service_categories (name, description, icon) VALUES (?, ?, ?)',
        [category.name, category.description, category.icon]
      );
    }

    // Get category mappings and verify they exist
    const categories = await db.all('SELECT id, name FROM service_categories');
    const categoryMap = {};
    categories.forEach(cat => {
      categoryMap[cat.name] = cat.id;
    });
    
    console.log('üìã Category mappings:', categoryMap);
    
    console.log('üë®‚Äçüíº Inserting enhanced service providers...');
    for (const provider of enhancedSampleData.serviceProviders) {
      // Map old category IDs to new ones
      let categoryId;
      switch (provider.service_category_id) {
        case 1: categoryId = categoryMap['‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ']; break;
        case 2: categoryId = categoryMap['‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏î‡∏´‡∏ç‡πâ‡∏≤']; break;
        case 3: categoryId = categoryMap['‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡πÑ‡∏°‡πâ']; break;
        case 4: categoryId = categoryMap['‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢']; break;
        case 5: categoryId = categoryMap['‡∏ä‡πà‡∏≤‡∏á‡πÑ‡∏ü‡∏ü‡πâ‡∏≤']; break;
        case 6: categoryId = categoryMap['‡∏ä‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏õ‡∏≤']; break;
        case 7: categoryId = categoryMap['‡∏ä‡πà‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á']; break;
        case 8: categoryId = categoryMap['‡∏ä‡πà‡∏≤‡∏á‡πÅ‡∏≠‡∏£‡πå']; break;
        case 9: categoryId = categoryMap['‡∏ä‡πà‡∏≤‡∏á‡∏ï‡∏±‡∏î‡∏ú‡∏°']; break;
        case 10: categoryId = categoryMap['‡∏á‡∏≤‡∏ô‡∏Ç‡∏ô‡∏™‡πà‡∏á']; break;
        default: categoryId = categoryMap['‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ'];
      }
      
      if (!categoryId) {
        console.log(`‚ö†Ô∏è Warning: Could not find category for provider ${provider.name}`);
        continue;
      }
      
      console.log(`   Inserting provider: ${provider.name} (Category ID: ${categoryId})`);
      await db.run(
        `INSERT INTO service_providers (
          name, phone, line_id, service_category_id, location, district, subdistrict,
          description, price_range, available_days, available_hours, rating, total_jobs
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          provider.name, provider.phone, provider.line_id, categoryId,
          provider.location, provider.district, provider.subdistrict, provider.description,
          provider.price_range, provider.available_days, provider.available_hours,
          provider.rating, provider.total_jobs
        ]
      );
    }

    // Insert enhanced customers
    console.log('üè† Inserting enhanced customers...');
    for (const customer of enhancedSampleData.customers) {
      // Map old category IDs to new ones
      let categoryId;
      switch (customer.service_category_id) {
        case 1: categoryId = categoryMap['‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ']; break;
        case 2: categoryId = categoryMap['‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏î‡∏´‡∏ç‡πâ‡∏≤']; break;
        case 3: categoryId = categoryMap['‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡πÑ‡∏°‡πâ']; break;
        case 4: categoryId = categoryMap['‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢']; break;
        case 5: categoryId = categoryMap['‡∏ä‡πà‡∏≤‡∏á‡πÑ‡∏ü‡∏ü‡πâ‡∏≤']; break;
        case 6: categoryId = categoryMap['‡∏ä‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏õ‡∏≤']; break;
        default: categoryId = categoryMap['‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ'];
      }
      
      if (!categoryId) {
        console.log(`‚ö†Ô∏è Warning: Could not find category for customer ${customer.name}`);
        continue;
      }
      
      console.log(`   Inserting customer: ${customer.name} (Category ID: ${categoryId})`);
      await db.run(
        `INSERT INTO customers (
          name, phone, line_id, location, district, subdistrict, service_category_id,
          job_description, budget_range, preferred_date, preferred_time, urgency_level, preferred_contact
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          customer.name, customer.phone, customer.line_id, customer.location,
          customer.district, customer.subdistrict, categoryId,
          customer.job_description, customer.budget_range, customer.preferred_date,
          customer.preferred_time, customer.urgency_level, customer.preferred_contact
        ]
      );
    }

    // Create strategic matches for testing
    console.log('ü§ù Creating strategic test matches...');
    
    // Get actual provider and customer IDs with their details
    const providers = await db.all(`
      SELECT p.id, p.name, p.district, p.subdistrict, p.price_range, p.available_days, p.available_hours, 
             c.name as category_name
      FROM service_providers p 
      JOIN service_categories c ON p.service_category_id = c.id
      ORDER BY p.id
    `);
    
    const customers = await db.all(`
      SELECT cu.id, cu.name, cu.district, cu.subdistrict, cu.budget_range, cu.preferred_date, cu.preferred_time,
             c.name as category_name
      FROM customers cu 
      JOIN service_categories c ON cu.service_category_id = c.id
      ORDER BY cu.id
    `);
    
    console.log(`Found ${providers.length} providers and ${customers.length} customers`);
    
    if (providers.length >= 3 && customers.length >= 3) {
      // Create diverse matches with different match qualities
      const matches = [
        // Perfect match: Same district + same subdistrict + overlapping price + available time
        { 
          provider_id: providers.find(p => p.district === '‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏™‡∏∞‡∏î‡∏ß‡∏Å' && p.subdistrict === '‡πÅ‡∏û‡∏á‡∏û‡∏ß‡∏¢')?.id || providers[0].id,
          customer_id: customers.find(c => c.district === '‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏™‡∏∞‡∏î‡∏ß‡∏Å' && c.subdistrict === '‡πÅ‡∏û‡∏á‡∏û‡∏ß‡∏¢')?.id || customers[0].id,
          match_score: 0.95, 
          status: 'accepted',
          job_progress: 'started'
        },
        
        // Good match: Same district, different subdistrict
        { 
          provider_id: providers.find(p => p.district === '‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏™‡∏∞‡∏î‡∏ß‡∏Å' && p.category_name === '‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ')?.id || providers[0].id,
          customer_id: customers.find(c => c.district === '‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏™‡∏∞‡∏î‡∏ß‡∏Å' && c.category_name === '‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ')?.id || customers[0].id,
          match_score: 0.85, 
          status: 'completed',
          job_progress: 'completed'
        },
        
        // Medium match: Different district but same service
        { 
          provider_id: providers.find(p => p.category_name === '‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏î‡∏´‡∏ç‡πâ‡∏≤')?.id || providers[1].id,
          customer_id: customers.find(c => c.category_name === '‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏î‡∏´‡∏ç‡πâ‡∏≤')?.id || customers[1].id,
          match_score: 0.70, 
          status: 'pending',
          job_progress: 'pending'
        },
        
        // Lower match: Cross-district, different price range
        { 
          provider_id: providers.find(p => p.district === '‡πÇ‡∏û‡∏ò‡∏≤‡∏£‡∏≤‡∏°')?.id || providers[2].id,
          customer_id: customers.find(c => c.district === '‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ')?.id || customers[2].id,
          match_score: 0.60, 
          status: 'rejected',
          job_progress: null
        },
        
        // Perfect service match: Same subdistrict + same service type
        { 
          provider_id: providers.find(p => p.category_name === '‡∏ä‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏õ‡∏≤')?.id || providers[3].id,
          customer_id: customers.find(c => c.category_name === '‡∏ä‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏õ‡∏≤')?.id || customers[3].id,
          match_score: 0.90, 
          status: 'accepted',
          job_progress: 'arrived'
        },
        
        // Another good match for grass cutting
        { 
          provider_id: providers.find(p => p.category_name === '‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏î‡∏´‡∏ç‡πâ‡∏≤' && p.district === '‡∏ö‡∏≤‡∏á‡πÅ‡∏û')?.id || providers[4].id,
          customer_id: customers.find(c => c.category_name === '‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏î‡∏´‡∏ç‡πâ‡∏≤' && c.district === '‡∏ö‡∏≤‡∏á‡πÅ‡∏û')?.id || customers[4].id,
          match_score: 0.88, 
          status: 'accepted',
          job_progress: 'closed'
        }
      ];
      
      for (const match of matches) {
        await db.run(
          `INSERT INTO job_matches (provider_id, customer_id, match_score, status, job_progress)
           VALUES (?, ?, ?, ?, ?)`,
          [match.provider_id, match.customer_id, match.match_score, match.status, match.job_progress]
        );
        console.log(`‚úÖ Created strategic match: Provider ${match.provider_id} <-> Customer ${match.customer_id} (Score: ${match.match_score}, Status: ${match.status}, Progress: ${match.job_progress})`);
      }
    } else {
      console.log('‚ö†Ô∏è Skipping matches creation - insufficient providers or customers');
    }

    console.log('‚úÖ Enhanced database seeding completed successfully!');
    
    // Display comprehensive summary
    const finalProviderCount = await db.get('SELECT COUNT(*) as count FROM service_providers');
    const finalCustomerCount = await db.get('SELECT COUNT(*) as count FROM customers');
    const categoryCount = await db.get('SELECT COUNT(*) as count FROM service_categories');
    const matchCount = await db.get('SELECT COUNT(*) as count FROM job_matches');
    
    // Show match statistics by status and progress
    const statusStats = await db.all(`
      SELECT status, COUNT(*) as count 
      FROM job_matches 
      GROUP BY status
    `);
    
    const progressStats = await db.all(`
      SELECT job_progress, COUNT(*) as count 
      FROM job_matches 
      WHERE job_progress IS NOT NULL
      GROUP BY job_progress
    `);

    console.log('\nüìä Enhanced Database Summary:');
    console.log(`   - Service Categories: ${categoryCount.count}`);
    console.log(`   - Service Providers: ${finalProviderCount.count}`);
    console.log(`   - Customers: ${finalCustomerCount.count}`);
    console.log(`   - Job Matches: ${matchCount.count}`);
    
    console.log('\nüìà Match Status Distribution:');
    statusStats.forEach(stat => {
      console.log(`   - ${stat.status}: ${stat.count}`);
    });
    
    console.log('\nüîÑ Job Progress Distribution:');
    progressStats.forEach(stat => {
      console.log(`   - ${stat.job_progress}: ${stat.count}`);
    });

    return {
      success: true,
      message: 'Enhanced database seeded successfully',
      data: {
        categories: categoryCount.count,
        providers: finalProviderCount.count,
        customers: finalCustomerCount.count,
        matches: matchCount.count,
        statusStats: statusStats,
        progressStats: progressStats
      }
    };

  } catch (error) {
    console.error('‚ùå Error seeding enhanced database:', error);
    throw error;
  }
}

// Run seeding if called directly
if (require.main === module) {
  seedEnhancedDatabase()
    .then(() => process.exit(0))
    .catch(() => process.exit(1));
}

module.exports = { seedEnhancedDatabase };