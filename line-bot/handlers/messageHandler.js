const axios = require('axios');
const { FlexMessage, TextMessage, QuickReply } = require('@line/bot-sdk');
const templates = require('../templates/messageTemplates');
const apiClient = require('../utils/apiClient');

class MessageHandler {
  async handleTextMessage(event, client) {
    const userMessage = event.message.text.toLowerCase().trim();
    const replyToken = event.replyToken;

    // Command matching
    const commands = {
      '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ': () => this.sendWelcomeMessage(client, replyToken),
      '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£': () => this.searchProviders(client, replyToken),
      '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏á‡∏≤‡∏ô': () => this.searchJobs(client, replyToken),
      '‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏á‡∏≤‡∏ô': () => this.autoMatch(client, replyToken),
      '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£': () => this.registerProvider(client, replyToken),
      '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏á‡∏≤‡∏ô': () => this.registerCustomer(client, replyToken),
      '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠': () => this.sendHelpMessage(client, replyToken),
      'help': () => this.sendHelpMessage(client, replyToken),
      '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô': () => this.sendWelcomeMessage(client, replyToken),
      'start': () => this.sendWelcomeMessage(client, replyToken),
    };

    // Check for exact command match
    if (commands[userMessage]) {
      return commands[userMessage]();
    }

    // Check for partial matches or keywords
    if (userMessage.includes('‡∏ä‡πà‡∏≤‡∏á') || userMessage.includes('‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£')) {
      return this.searchProviders(client, replyToken, userMessage);
    }

    if (userMessage.includes('‡∏á‡∏≤‡∏ô') || userMessage.includes('‡∏à‡πâ‡∏≤‡∏á')) {
      return this.searchJobs(client, replyToken, userMessage);
    }

    if (userMessage.includes('‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠') || userMessage.includes('‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°')) {
      return this.sendContactInfo(client, replyToken);
    }

    // Default response with quick replies
    return this.sendDefaultResponse(client, replyToken);
  }

  async sendWelcomeMessage(client, replyToken) {
    const welcomeMessage = templates.createWelcomeMessage();
    return client.replyMessage(replyToken, welcomeMessage);
  }

  async searchProviders(client, replyToken, query = '') {
    try {
      const response = await apiClient.get('/providers', {
        params: {
          limit: 5,
          search: query,
          sort_by: 'rating',
          order: 'DESC'
        }
      });

      const providers = response.data.data;
      
      if (providers.length === 0) {
        return client.replyMessage(replyToken, {
          type: 'text',
          text: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
        });
      }

      const providerCards = templates.createProviderCarousel(providers);
      return client.replyMessage(replyToken, providerCards);

    } catch (error) {
      console.error('Error searching providers:', error);
      return client.replyMessage(replyToken, {
        type: 'text',
        text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
      });
    }
  }

  async searchJobs(client, replyToken, query = '') {
    try {
      const response = await apiClient.get('/customers', {
        params: {
          limit: 5,
          search: query,
          sort_by: 'created_at',
          order: 'DESC'
        }
      });

      const customers = response.data.data;
      
      if (customers.length === 0) {
        return client.replyMessage(replyToken, {
          type: 'text',
          text: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
        });
      }

      const jobCards = templates.createJobCarousel(customers);
      return client.replyMessage(replyToken, jobCards);

    } catch (error) {
      console.error('Error searching jobs:', error);
      return client.replyMessage(replyToken, {
        type: 'text',
        text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
      });
    }
  }

  async autoMatch(client, replyToken) {
    try {
      const response = await apiClient.get('/auto-matches', {
        params: { limit: 10 }
      });

      const matches = response.data.data;
      
      if (matches.length === 0) {
        return client.replyMessage(replyToken, {
          type: 'text',
          text: '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á'
        });
      }

      const matchCards = templates.createMatchCarousel(matches);
      return client.replyMessage(replyToken, matchCards);

    } catch (error) {
      console.error('Error getting auto matches:', error);
      return client.replyMessage(replyToken, {
        type: 'text',
        text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
      });
    }
  }

  async registerProvider(client, replyToken) {
    const message = {
      type: 'text',
      text: 'üìù ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£\n\n' +
            '‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤:\n' +
            'üåê https://ratchaburi-community-jobs.vercel.app/providers/register\n\n' +
            '‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà:\n' +
            'üìû 0X-XXX-XXXX\n' +
            'üìß support@ratchaburicommunity.co.th',
      quickReply: {
        items: [
          {
            type: 'action',
            action: {
              type: 'postback',
              label: '‡∏î‡∏π‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£',
              data: 'action=search_providers'
            }
          },
          {
            type: 'action',
            action: {
              type: 'postback',
              label: '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠',
              data: 'action=help'
            }
          }
        ]
      }
    };

    return client.replyMessage(replyToken, message);
  }

  async registerCustomer(client, replyToken) {
    const message = {
      type: 'text',
      text: 'üìù ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô\n\n' +
            '‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡πâ‡∏≤‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤:\n' +
            'üåê https://ratchaburi-community-jobs.vercel.app/customers/register\n\n' +
            '‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà:\n' +
            'üìû 0X-XXX-XXXX\n' +
            'üìß support@ratchaburicommunity.co.th',
      quickReply: {
        items: [
          {
            type: 'action',
            action: {
              type: 'postback',
              label: '‡∏î‡∏π‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡πâ‡∏≤‡∏á',
              data: 'action=search_jobs'
            }
          },
          {
            type: 'action',
            action: {
              type: 'postback',
              label: '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠',
              data: 'action=help'
            }
          }
        ]
      }
    };

    return client.replyMessage(replyToken, message);
  }

  async sendHelpMessage(client, replyToken) {
    const helpMessage = templates.createHelpMessage();
    return client.replyMessage(replyToken, helpMessage);
  }

  async sendContactInfo(client, replyToken) {
    const contactMessage = {
      type: 'text',
      text: 'üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤\n\n' +
            '‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡∏ö‡∏•‡πÅ‡∏û‡∏á‡∏û‡∏ß‡∏¢\n' +
            '‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏™‡∏∞‡∏î‡∏ß‡∏Å ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ\n\n' +
            'üìû ‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå: 0X-XXX-XXXX\n' +
            'üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•: support@ratchaburicommunity.co.th\n' +
            'üí¨ LINE Official: @ratchaburi_community\n\n' +
            '‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£: ‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå-‡∏®‡∏∏‡∏Å‡∏£‡πå 08:00-16:30 ‡∏ô.'
    };

    return client.replyMessage(replyToken, contactMessage);
  }

  async sendDefaultResponse(client, replyToken) {
    const message = {
      type: 'text',
      text: 'ü§ñ ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå:\n\n' +
            '‚Ä¢ "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£" - ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡πà‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£\n' +
            '‚Ä¢ "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏á‡∏≤‡∏ô" - ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡πâ‡∏≤‡∏á\n' +
            '‚Ä¢ "‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏á‡∏≤‡∏ô" - ‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥\n' +
            '‚Ä¢ "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£" - ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£\n' +
            '‚Ä¢ "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏á‡∏≤‡∏ô" - ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡πâ‡∏≤‡∏á\n' +
            '‚Ä¢ "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠" - ‡∏î‡∏π‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
      quickReply: {
        items: [
          {
            type: 'action',
            action: {
              type: 'postback',
              label: '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£',
              data: 'action=search_providers'
            }
          },
          {
            type: 'action',
            action: {
              type: 'postback',
              label: '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏á‡∏≤‡∏ô',
              data: 'action=search_jobs'
            }
          },
          {
            type: 'action',
            action: {
              type: 'postback',
              label: '‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏á‡∏≤‡∏ô',
              data: 'action=auto_match'
            }
          },
          {
            type: 'action',
            action: {
              type: 'postback',
              label: '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠',
              data: 'action=help'
            }
          }
        ]
      }
    };

    return client.replyMessage(replyToken, message);
  }
}

module.exports = new MessageHandler();