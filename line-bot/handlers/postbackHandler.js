const messageHandler = require('./messageHandler');
const templates = require('../templates/messageTemplates');
const apiClient = require('../utils/apiClient');

class PostbackHandler {
  async handlePostback(event, client) {
    const userId = event.source.userId;
    const replyToken = event.replyToken;
    const postbackData = event.postback.data;
    
    // Parse postback data
    const params = new URLSearchParams(postbackData);
    const action = params.get('action');
    const id = params.get('id');
    const type = params.get('type');

    console.log('Postback received:', { action, id, type });

    switch (action) {
      case 'search_providers':
        return messageHandler.searchProviders(client, replyToken);
      
      case 'search_jobs':
        return messageHandler.searchJobs(client, replyToken, '', userId);
      
      case 'search_all_jobs':
        return messageHandler.searchJobs(client, replyToken, '', null); // Pass null to get all jobs
      
      case 'auto_match':
        return messageHandler.autoMatch(client, replyToken);
      
      case 'register_provider':
        return messageHandler.registerProvider(client, replyToken);
      
      case 'register_customer':
        return messageHandler.registerCustomer(client, replyToken);
      
      case 'help':
        return messageHandler.sendHelpMessage(client, replyToken);
      
      case 'view_provider':
        return this.viewProviderDetail(client, replyToken, id);
      
      case 'view_customer':
        return this.viewCustomerDetail(client, replyToken, id);
      
      case 'view_match':
        return this.viewMatchDetail(client, replyToken, id);
      
      case 'contact_provider':
        return this.contactProvider(client, replyToken, id);
      
      case 'contact_customer':
        return this.contactCustomer(client, replyToken, id);
      
      case 'filter_category':
        return this.filterByCategory(client, replyToken, id, type);
      
      case 'filter_location':
        return this.filterByLocation(client, replyToken, params.get('district'), params.get('subdistrict'));
      
      case 'show_categories':
        return this.showCategories(client, replyToken);
      
      case 'show_locations':
        return this.showLocations(client, replyToken);
      
      case 'accept_job':
        return this.acceptJob(client, replyToken, params.get('customer_id'), userId);
      
      case 'confirm_accept_job':
        return this.confirmAcceptJob(client, replyToken, params.get('customer_id'), params.get('provider_id'));
      
      case 'cancel_accept_job':
        return this.cancelAcceptJob(client, replyToken);
      
      case 'update_progress':
        return this.updateJobProgress(client, replyToken, params.get('match_id'), params.get('stage'));
      
      case 'view_my_jobs':
        return this.viewMyJobs(client, replyToken, userId);
      
      case 'complete_job':
        return this.completeJob(client, replyToken, params.get('match_id'), params);
      
      case 'submit_customer_feedback':
        return this.submitCustomerFeedback(client, replyToken, params);
      
      default:
        return this.handleUnknownPostback(client, replyToken);
    }
  }

  async viewProviderDetail(client, replyToken, providerId) {
    try {
      const response = await apiClient.get(`/providers/${providerId}`);
      const provider = response.data.data;
      
      const detailMessage = templates.createProviderDetail(provider);
      return client.replyMessage(replyToken, detailMessage);
      
    } catch (error) {
      console.error('Error fetching provider detail:', error);
      return client.replyMessage(replyToken, {
        type: 'text',
        text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ'
      });
    }
  }

  async viewCustomerDetail(client, replyToken, customerId) {
    try {
      const response = await apiClient.get(`/customers/${customerId}`);
      const customer = response.data.data;
      
      const detailMessage = templates.createCustomerDetail(customer);
      return client.replyMessage(replyToken, detailMessage);
      
    } catch (error) {
      console.error('Error fetching customer detail:', error);
      return client.replyMessage(replyToken, {
        type: 'text',
        text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ'
      });
    }
  }

  async viewMatchDetail(client, replyToken, matchId) {
    try {
      const response = await apiClient.get(`/matches/${matchId}`);
      const match = response.data.data;
      
      const detailMessage = templates.createMatchDetail(match);
      return client.replyMessage(replyToken, detailMessage);
      
    } catch (error) {
      console.error('Error fetching match detail:', error);
      return client.replyMessage(replyToken, {
        type: 'text',
        text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ'
      });
    }
  }

  async contactProvider(client, replyToken, providerId) {
    try {
      const response = await apiClient.get(`/providers/${providerId}`);
      const provider = response.data.data;
      
      const contactMessage = {
        type: 'text',
        text: `üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ ${provider.name}\n\n` +
              `üì± ‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå: ${provider.phone}\n` +
              `${provider.line_id ? `üí¨ LINE: ${provider.line_id}\n` : ''}` +
              `üìç ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: ${provider.location}\n` +
              `üèòÔ∏è ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà: ${provider.subdistrict}, ${provider.district}\n\n` +
              `üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤: ${provider.price_range || '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°'}\n` +
              `‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£: ${provider.available_hours || '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°'}`,
        quickReply: {
          items: [
            {
              type: 'action',
              action: {
                type: 'postback',
                label: '‡∏î‡∏π‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô',
                data: 'action=search_providers'
              }
            },
            {
              type: 'action',
              action: {
                type: 'postback',
                label: '‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å',
                data: 'action=help'
              }
            }
          ]
        }
      };
      
      return client.replyMessage(replyToken, contactMessage);
      
    } catch (error) {
      console.error('Error getting provider contact:', error);
      return client.replyMessage(replyToken, {
        type: 'text',
        text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ'
      });
    }
  }

  async contactCustomer(client, replyToken, customerId) {
    try {
      const response = await apiClient.get(`/customers/${customerId}`);
      const customer = response.data.data;
      
      const contactMessage = {
        type: 'text',
        text: `üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ ${customer.name}\n\n` +
              `üì± ‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå: ${customer.phone}\n` +
              `${customer.line_id ? `üí¨ LINE: ${customer.line_id}\n` : ''}` +
              `üìç ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: ${customer.location}\n` +
              `üèòÔ∏è ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà: ${customer.subdistrict}, ${customer.district}\n\n` +
              `üíº ‡∏á‡∏≤‡∏ô: ${customer.job_description}\n` +
              `üí∞ ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: ${customer.budget_range || '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°'}\n` +
              `‚ö° ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô: ${this.getUrgencyText(customer.urgency_level)}`,
        quickReply: {
          items: [
            {
              type: 'action',
              action: {
                type: 'postback',
                label: '‡∏î‡∏π‡∏á‡∏≤‡∏ô‡∏≠‡∏∑‡πà‡∏ô',
                data: 'action=search_jobs'
              }
            },
            {
              type: 'action',
              action: {
                type: 'postback',
                label: '‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å',
                data: 'action=help'
              }
            }
          ]
        }
      };
      
      return client.replyMessage(replyToken, contactMessage);
      
    } catch (error) {
      console.error('Error getting customer contact:', error);
      return client.replyMessage(replyToken, {
        type: 'text',
        text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ'
      });
    }
  }

  async filterByCategory(client, replyToken, categoryId, type) {
    try {
      const endpoint = type === 'provider' ? '/providers' : '/customers';
      const response = await apiClient.get(endpoint, {
        params: {
          category_id: categoryId,
          limit: 10,
          sort_by: type === 'provider' ? 'rating' : 'created_at',
          order: 'DESC'
        }
      });

      const items = response.data.data;
      
      if (items.length === 0) {
        return client.replyMessage(replyToken, {
          type: 'text',
          text: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ'
        });
      }

      const carousel = type === 'provider' 
        ? templates.createProviderCarousel(items)
        : templates.createJobCarousel(items);
        
      return client.replyMessage(replyToken, carousel);
      
    } catch (error) {
      console.error('Error filtering by category:', error);
      return client.replyMessage(replyToken, {
        type: 'text',
        text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á'
      });
    }
  }

  async filterByLocation(client, replyToken, district, subdistrict) {
    // Implementation for location filtering
    return client.replyMessage(replyToken, {
      type: 'text',
      text: '‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤'
    });
  }

  async showCategories(client, replyToken) {
    try {
      const response = await apiClient.get('/providers/categories');
      const categories = response.data.data;
      
      const categoryMessage = templates.createCategorySelection(categories);
      return client.replyMessage(replyToken, categoryMessage);
      
    } catch (error) {
      console.error('Error fetching categories:', error);
      return client.replyMessage(replyToken, {
        type: 'text',
        text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ'
      });
    }
  }

  async showLocations(client, replyToken) {
    const locationMessage = templates.createLocationSelection();
    return client.replyMessage(replyToken, locationMessage);
  }

  async handleUnknownPostback(client, replyToken) {
    return client.replyMessage(replyToken, {
      type: 'text',
      text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á'
    });
  }

  async acceptJob(client, replyToken, customerId, lineUserId) {
    try {
      // First, check if the user is registered as a provider
      const providersResponse = await apiClient.get('/providers', {
        params: { line_id: lineUserId, limit: 1 }
      });
      
      const providers = providersResponse.data.data;
      
      if (!providers || providers.length === 0) {
        return client.replyMessage(replyToken, {
          type: 'text',
          text: '‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô:\nüåê https://ratchaburi-community-jobs.vercel.app/providers/register\n\n‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà: üìû 0X-XXX-XXXX',
          quickReply: {
            items: [
              {
                type: 'action',
                action: {
                  type: 'postback',
                  label: '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£',
                  data: 'action=register_provider'
                }
              },
              {
                type: 'action',
                action: {
                  type: 'postback',
                  label: '‡∏î‡∏π‡∏á‡∏≤‡∏ô‡∏≠‡∏∑‡πà‡∏ô',
                  data: 'action=search_jobs'
                }
              }
            ]
          }
        });
      }

      const provider = providers[0];

      // Get customer details
      const customerResponse = await apiClient.get(`/customers/${customerId}`);
      const customer = customerResponse.data.data;

      // Check if there's already a match between this provider and customer
      const existingMatchResponse = await apiClient.get('/matches', {
        params: {
          provider_id: provider.id,
          customer_id: customerId,
          limit: 1
        }
      });

      const existingMatches = existingMatchResponse.data.data;
      
      if (existingMatches && existingMatches.length > 0) {
        const match = existingMatches[0];
        return client.replyMessage(replyToken, {
          type: 'text',
          text: `‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ñ‡∏¢‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß\n\n‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${this.getMatchStatusText(match.status)}\n\n‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà`,
          quickReply: {
            items: [
              {
                type: 'action',
                action: {
                  type: 'postback',
                  label: '‡∏î‡∏π‡∏á‡∏≤‡∏ô‡∏≠‡∏∑‡πà‡∏ô',
                  data: 'action=search_jobs'
                }
              }
            ]
          }
        });
      }

      // Create confirmation message
      const confirmMessage = templates.createJobAcceptanceConfirmation(customer, provider);
      return client.replyMessage(replyToken, confirmMessage);

    } catch (error) {
      console.error('Error in acceptJob:', error);
      return client.replyMessage(replyToken, {
        type: 'text',
        text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
      });
    }
  }

  async confirmAcceptJob(client, replyToken, customerId, providerId) {
    try {
      // Create a match between provider and customer
      const matchResponse = await apiClient.post('/matches', {
        provider_id: providerId,
        customer_id: customerId
      });

      if (matchResponse.data.success) {
        const matchId = matchResponse.data.data.id;
        
        // Update match status to accepted
        await apiClient.put(`/matches/${matchId}/status`, {
          status: 'accepted',
          provider_response: '‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ú‡πà‡∏≤‡∏ô LINE Bot'
        });

        // Get customer details for contact info
        const customerResponse = await apiClient.get(`/customers/${customerId}`);
        const customer = customerResponse.data.data;

        // Update job progress to accepted
        await apiClient.post(`/job-progress/${matchId}/update`, {
          stage: 'accepted',
          notes: '‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏£‡∏±‡∏ö‡∏ú‡πà‡∏≤‡∏ô LINE Bot'
        });

        const successMessage = {
          type: 'flex',
          altText: '‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
          contents: {
            type: 'bubble',
            body: {
              type: 'box',
              layout: 'vertical',
              contents: [
                {
                  type: 'text',
                  text: '‚úÖ ‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!',
                  weight: 'bold',
                  size: 'xl',
                  color: '#16a34a'
                },
                {
                  type: 'text',
                  text: 'üéØ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß',
                  size: 'sm',
                  color: '#059669',
                  margin: 'sm'
                },
                {
                  type: 'separator',
                  margin: 'lg'
                },
                {
                  type: 'text',
                  text: `üìã ‡∏á‡∏≤‡∏ô: ${customer.job_description}`,
                  size: 'sm',
                  color: '#374151',
                  margin: 'lg',
                  wrap: true
                },
                {
                  type: 'text',
                  text: `üë§ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${customer.name}`,
                  size: 'sm',
                  color: '#374151',
                  margin: 'sm'
                },
                {
                  type: 'text',
                  text: `üìû ‡πÇ‡∏ó‡∏£: ${customer.phone}`,
                  size: 'sm',
                  color: '#374151',
                  margin: 'xs'
                },
                {
                  type: 'text',
                  text: `üìç ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: ${customer.location}`,
                  size: 'sm',
                  color: '#374151',
                  margin: 'xs',
                  wrap: true
                },
                {
                  type: 'text',
                  text: `üí∞ ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: ${customer.budget_range || '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°'}`,
                  size: 'sm',
                  color: '#374151',
                  margin: 'xs'
                },
                {
                  type: 'separator',
                  margin: 'lg'
                },
                {
                  type: 'text',
                  text: 'üìù ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ: ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà',
                  size: 'sm',
                  color: '#64748b',
                  margin: 'lg',
                  wrap: true
                }
              ]
            },
            footer: {
              type: 'box',
              layout: 'vertical',
              spacing: 'sm',
              contents: [
                {
                  type: 'button',
                  style: 'primary',
                  height: 'sm',
                  color: '#0ea5e9',
                  action: {
                    type: 'tel',
                    label: `üìû ‡πÇ‡∏ó‡∏£‡∏´‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤`,
                    uri: `tel:${customer.phone}`
                  }
                },
                {
                  type: 'button',
                  style: 'primary',
                  height: 'sm',
                  color: '#f59e0b',
                  action: {
                    type: 'postback',
                    label: 'üöó ‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß',
                    data: `action=update_progress&match_id=${matchId}&stage=arrived`
                  }
                },
                {
                  type: 'button',
                  style: 'secondary',
                  height: 'sm',
                  action: {
                    type: 'postback',
                    label: '‡∏î‡∏π‡∏á‡∏≤‡∏ô‡∏≠‡∏∑‡πà‡∏ô',
                    data: 'action=search_jobs'
                  }
                }
              ]
            }
          }
        };

        return client.replyMessage(replyToken, successMessage);
      } else {
        throw new Error('Failed to create match');
      }

    } catch (error) {
      console.error('Error confirming job acceptance:', error);
      return client.replyMessage(replyToken, {
        type: 'text',
        text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà'
      });
    }
  }

  async cancelAcceptJob(client, replyToken) {
    return client.replyMessage(replyToken, {
      type: 'text',
      text: '‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô\n\n‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏á‡∏≤‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥',
      quickReply: {
        items: [
          {
            type: 'action',
            action: {
              type: 'postback',
              label: '‡∏î‡∏π‡∏á‡∏≤‡∏ô‡∏≠‡∏∑‡πà‡∏ô',
              data: 'action=search_jobs'
            }
          },
          {
            type: 'action',
            action: {
              type: 'postback',
              label: '‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å',
              data: 'action=help'
            }
          }
        ]
      }
    });
  }

  getMatchStatusText(status) {
    switch (status) {
      case 'pending': return '‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö';
      case 'accepted': return '‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß';
      case 'rejected': return '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò';
      case 'completed': return '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';
      case 'cancelled': return '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å';
      default: return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
    }
  }

  async updateJobProgress(client, replyToken, matchId, stage) {
    try {
      // Update progress via API
      await apiClient.post(`/job-progress/${matchId}/update`, {
        stage: stage,
        notes: `‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ú‡πà‡∏≤‡∏ô LINE Bot`
      });

      // Get updated job details
      const progressResponse = await apiClient.get(`/job-progress/${matchId}`);
      const jobData = progressResponse.data.data;

      const progressMessage = templates.createJobProgressUpdate(jobData, stage);
      return client.replyMessage(replyToken, progressMessage);

    } catch (error) {
      console.error('Error updating job progress:', error);
      return client.replyMessage(replyToken, {
        type: 'text',
        text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
      });
    }
  }

  async viewMyJobs(client, replyToken, lineUserId) {
    try {
      // Get provider info
      const providersResponse = await apiClient.get('/providers', {
        params: { line_id: lineUserId, limit: 1 }
      });
      
      const providers = providersResponse.data.data;
      
      if (!providers || providers.length === 0) {
        return client.replyMessage(replyToken, {
          type: 'text',
          text: '‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£',
          quickReply: {
            items: [
              {
                type: 'action',
                action: {
                  type: 'postback',
                  label: '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£',
                  data: 'action=register_provider'
                }
              }
            ]
          }
        });
      }

      const provider = providers[0];

      // Get active jobs for this provider
      const jobsResponse = await apiClient.get('/job-progress', {
        params: {
          provider_id: provider.id,
          limit: 10
        }
      });

      const jobs = jobsResponse.data.data;
      
      if (jobs.length === 0) {
        return client.replyMessage(replyToken, {
          type: 'text',
          text: 'üìã ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
          quickReply: {
            items: [
              {
                type: 'action',
                action: {
                  type: 'postback',
                  label: '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà',
                  data: 'action=search_jobs'
                }
              }
            ]
          }
        });
      }

      const jobCarousel = templates.createMyJobsCarousel(jobs);
      return client.replyMessage(replyToken, jobCarousel);

    } catch (error) {
      console.error('Error fetching my jobs:', error);
      return client.replyMessage(replyToken, {
        type: 'text',
        text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
      });
    }
  }

  async completeJob(client, replyToken, matchId, params) {
    try {
      const actualDuration = params.get('duration') || '';
      const finalCost = params.get('cost') || '';

      // Update job to completed status
      await apiClient.post(`/job-progress/${matchId}/update`, {
        stage: 'completed',
        notes: '‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô ‡∏£‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ feedback',
        actual_duration: actualDuration,
        final_cost: parseFloat(finalCost) || null
      });

      // Get job details for customer notification
      const progressResponse = await apiClient.get(`/job-progress/${matchId}`);
      const jobData = progressResponse.data.data;

      const completionMessage = {
        type: 'flex',
        altText: '‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô',
        contents: {
          type: 'bubble',
          body: {
            type: 'box',
            layout: 'vertical',
            contents: [
              {
                type: 'text',
                text: 'üéâ ‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!',
                weight: 'bold',
                size: 'xl',
                color: '#16a34a'
              },
              {
                type: 'text',
                text: 'üéØ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏£‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ feedback',
                size: 'sm',
                color: '#8b5cf6',
                margin: 'sm'
              },
              {
                type: 'separator',
                margin: 'lg'
              },
              {
                type: 'text',
                text: `üìã ‡∏á‡∏≤‡∏ô: ${jobData.match.job_description}`,
                size: 'sm',
                color: '#374151',
                margin: 'lg',
                wrap: true
              },
              {
                type: 'text',
                text: `üë§ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${jobData.match.customer_name}`,
                size: 'sm',
                color: '#374151',
                margin: 'sm'
              },
              {
                type: 'separator',
                margin: 'lg'
              },
              {
                type: 'text',
                text: 'üìù ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏£‡∏≤‡∏ö‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠ feedback\n‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ',
                size: 'sm',
                color: '#64748b',
                margin: 'lg',
                wrap: true
              }
            ]
          },
          footer: {
            type: 'box',
            layout: 'vertical',
            spacing: 'sm',
            contents: [
              {
                type: 'button',
                style: 'primary',
                height: 'sm',
                action: {
                  type: 'postback',
                  label: 'üìã ‡∏î‡∏π‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô',
                  data: 'action=view_my_jobs'
                }
              },
              {
                type: 'button',
                style: 'secondary',
                height: 'sm',
                action: {
                  type: 'postback',
                  label: '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà',
                  data: 'action=search_jobs'
                }
              }
            ]
          }
        }
      };

      return client.replyMessage(replyToken, completionMessage);

    } catch (error) {
      console.error('Error completing job:', error);
      return client.replyMessage(replyToken, {
        type: 'text',
        text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
      });
    }
  }

  async submitCustomerFeedback(client, replyToken, params) {
    try {
      const matchId = params.get('match_id');
      const serviceRating = parseInt(params.get('service_rating'));
      const qualityRating = parseInt(params.get('quality_rating'));
      const timelinessRating = parseInt(params.get('timeliness_rating'));
      const overallRating = parseInt(params.get('overall_rating'));
      const feedbackText = params.get('feedback_text') || '';

      await apiClient.post(`/job-progress/${matchId}/customer-feedback`, {
        service_rating: serviceRating,
        quality_rating: qualityRating,
        timeliness_rating: timelinessRating,
        overall_rating: overallRating,
        feedback_text: feedbackText,
        would_recommend: true,
        would_hire_again: true
      });

      const thankYouMessage = {
        type: 'text',
        text: 'üôè ‡∏Ç‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö feedback ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì!\n\n‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏£‡∏≤‡∏ö‡πÅ‡∏•‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ',
        quickReply: {
          items: [
            {
              type: 'action',
              action: {
                type: 'postback',
                label: '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà',
                data: 'action=search_jobs'
              }
            },
            {
              type: 'action',
              action: {
                type: 'postback',
                label: '‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å',
                data: 'action=help'
              }
            }
          ]
        }
      };

      return client.replyMessage(replyToken, thankYouMessage);

    } catch (error) {
      console.error('Error submitting customer feedback:', error);
      return client.replyMessage(replyToken, {
        type: 'text',
        text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á feedback ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
      });
    }
  }

  getUrgencyText(urgencyLevel) {
    switch (urgencyLevel) {
      case 'high': return '‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô üî¥';
      case 'medium': return '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á üü°';
      case 'low': return '‡πÑ‡∏°‡πà‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô üü¢';
      default: return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
    }
  }
}

module.exports = new PostbackHandler();