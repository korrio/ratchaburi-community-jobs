version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ratchaburi-backend
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - SQLITE_PATH=/app/data/database.db
      - JWT_SECRET=${JWT_SECRET}
      - LINE_CHANNEL_ACCESS_TOKEN=${LINE_CHANNEL_ACCESS_TOKEN}
      - LINE_CHANNEL_SECRET=${LINE_CHANNEL_SECRET}
    volumes:
      - ./backend/data:/app/data
    networks:
      - ratchaburi-network
    restart: unless-stopped

  web-app:
    build:
      context: ./web-app
      dockerfile: Dockerfile
    container_name: ratchaburi-web
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - API_URL=http://backend:5000
    depends_on:
      - backend
    networks:
      - ratchaburi-network
    restart: unless-stopped

  line-bot:
    build:
      context: ./line-bot
      dockerfile: Dockerfile
    container_name: ratchaburi-linebot
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=production
      - PORT=4000
      - API_URL=http://backend:5000
      - LINE_CHANNEL_ACCESS_TOKEN=${LINE_CHANNEL_ACCESS_TOKEN}
      - LINE_CHANNEL_SECRET=${LINE_CHANNEL_SECRET}
    depends_on:
      - backend
    networks:
      - ratchaburi-network
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: ratchaburi-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - web-app
      - line-bot
    networks:
      - ratchaburi-network
    restart: unless-stopped

networks:
  ratchaburi-network:
    driver: bridge

volumes:
  backend-data:
    driver: local